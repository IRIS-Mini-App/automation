name: CI

on:
  pull_request:
    branches: [ '**' ]

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    outputs:
      pylint_score: ${{ steps.lint_check.outputs.score }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint
          
      - name: Run Pylint Check
        id: lint_check
        run: |
          # Create a list of Python files
          find . -type f -name "*.py" > python_files.txt
          
          # Run pylint first time for score
          LINT_OUTPUT=$(pylint $(cat python_files.txt) --output-format=text --score=yes || true)
          echo "$LINT_OUTPUT" > pylint_report.txt
          
          # Extract score using more reliable pattern
          SCORE=$(echo "$LINT_OUTPUT" | grep -oP "(?<=rated at )[0-9.]+(?=/10)" || echo "0")
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "PYLINT_SCORE=$SCORE" >> $GITHUB_ENV
          
          # Run pylint second time for detailed report
          DETAIL_OUTPUT=$(pylint $(cat python_files.txt) --output-format=text || true)
          echo "$DETAIL_OUTPUT" > pylint_details.txt
          
          # Format report for markdown
          awk '
            BEGIN { in_module = 0 }
            {
              gsub(/\x1B\[[0-9;]*[mK]/, "")
              if ($0 ~ /^\*+/) {
                in_module = 1
                print "\n### " substr($0, index($0, "Module"))
              }
              else if (in_module && length($0) > 0) {
                print "- " $0
              }
            }' pylint_details.txt > pylint_report_formatted.txt
          
      - name: Post Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const score = process.env.PYLINT_SCORE;
            const details = fs.readFileSync('pylint_report_formatted.txt', 'utf8');
            
            // Status based on score
            const scoreNum = parseFloat(score);
            let status, statusText;
            if (scoreNum >= 9.5) {
              status = '‚ú®';
              statusText = 'Excellent';
            } else if (scoreNum >= 8.0) {
              status = '‚úÖ';
              statusText = 'Good';
            } else if (scoreNum >= 6.0) {
              status = '‚ö†Ô∏è';
              statusText = 'Warning';
            } else {
              status = '‚ùå';
              statusText = 'Failed';
            }
            
            let report = `## ${status} Pylint Quality Check\n\n> **Score:** \`${score}/10\` (${statusText})\n\n`;
            
            // Only show details if score is not perfect
            if (scoreNum < 10.0) {
              report += `<details>\n<summary>üîç Detailed Issues</summary>\n\n${details}\n\n</details>\n\n`;
            }
            
            report += '---\n\nGenerated by [Pylint](https://pylint.org/) via GitHub Actions';
            
            // Post comment on PR if exists
            if (context.payload.pull_request) {
              github.rest.issues.createComment({issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: report});
            }

  # test:
  #   name: Run Tests
  #   needs: lint
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       api-level: [34]
  #       target: [google_apis]
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.13'
          
  #     - name: Set up JDK
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: Setup Android SDK
  #       uses: android-actions/setup-android@v3
          
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         npm install -g appium
          
  #     - name: Start Appium Server
  #       run: |
  #         appium &
          
  #     - name: AVD cache
  #       uses: actions/cache@v4
  #       id: avd-cache
  #       with:
  #         path: |
  #           ~/.android/avd/*
  #           ~/.android/adb*
  #         key: avd-\${{ matrix.api-level }}

  #     - name: Create AVD and generate snapshot for caching
  #       if: steps.avd-cache.outputs.cache-hit != 'true'
  #       uses: reactivecircus/android-emulator-runner@v2
  #       with:
  #         api-level: \${{ matrix.api-level }}
  #         target: \${{ matrix.target }}
  #         arch: x86_64
  #         profile: Nexus 6
  #         force-avd-creation: false
  #         emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
  #         disable-animations: false
  #         script: echo "Generated AVD snapshot for caching."

  #     - name: Run Tests
  #       uses: reactivecircus/android-emulator-runner@v2
  #       with:
  #         api-level: \${{ matrix.api-level }}
  #         target: \${{ matrix.target }}
  #         arch: x86_64
  #         profile: Nexus 6
  #         force-avd-creation: false
  #         emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
  #         disable-animations: true
  #         script: |
  #           adb devices
  #           pytest
            
  #     - name: Get Allure history
  #       uses: actions/checkout@v4
  #       if: always()
  #       continue-on-error: true
  #       with:
  #         ref: gh-pages
  #         path: gh-pages
          
  #     - name: Generate Allure Report
  #       uses: simple-elf/allure-report-action@master
  #       if: always()
  #       id: allure-report
  #       with:
  #         allure_results: allure-results
  #         gh_pages: gh-pages
  #         allure_report: allure-report
  #         allure_history: allure-history
  #         keep_reports: 20
          
  #     - name: Deploy report to Github Pages
  #       if: always()
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_branch: gh-pages
  #         publish_dir: allure-history
  #         keep_files: true
