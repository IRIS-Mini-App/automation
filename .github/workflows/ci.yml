name: CI

on:
  # Trigger on push to master
  push:
    branches: [ master ]
  # Trigger on PRs to any branch
  pull_request:
    branches: [ '**' ]

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    # Add permissions needed for PR comments
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
        
    - name: Run Pylint Check
      id: lint_check
      run: |
        # Create a list of Python files
        find . -type f -name "*.py" > python_files.txt
        
        # Run pylint and capture results
        pylint $(cat python_files.txt) --output-format=text --score=yes > pylint_report.txt || LINT_EXIT_CODE=$?
        
        # Get score if available
        if [ -f pylint_report.txt ]; then
          SCORE=$(tail -n 2 pylint_report.txt | grep "rated at" | grep -oP "[\d.]+(?=/10)" || echo "0")
          echo "PYLINT_SCORE=$SCORE" >> $GITHUB_ENV
        fi
        
        # Save detailed report for comment (without ANSI colors)
        pylint $(cat python_files.txt) --output-format=text > pylint_details.txt || true
        
        # Format the report to be more readable in markdown
        awk '{
          # Remove ANSI color codes
          gsub(/\x1B\[[0-9;]*[mK]/, "")
          # Add markdown formatting
          if ($0 ~ /\*+/) print "\n### " substr($0, index($0, "Module"))
          else if (length($0) > 0) print "- " $0
        }' pylint_details.txt > pylint_report_formatted.txt
        
    - name: Post Results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const score = process.env.PYLINT_SCORE;
          const details = fs.readFileSync('pylint_report_formatted.txt', 'utf8');
          
          // Determine status based on score
          const scoreNum = parseFloat(score);
          let status, statusText;
          if (scoreNum >= 9.5) {
            status = '✨';
            statusText = 'Excellent';
          } else if (scoreNum >= 8.0) {
            status = '✅';
            statusText = 'Good';
          } else if (scoreNum >= 6.0) {
            status = '⚠️';
            statusText = 'Warning';
          } else {
            status = '❌';
            statusText = 'Failed';
          }
          
          const report = `## ${status} Pylint Quality Check
          
          > **Score:** \`${score}/10\` (${statusText})
          
          <details>
          <summary>📋 Detailed Issues</summary>
          
          ${details}
          
          </details>
          
          ---
          *Generated by [Pylint](https://pylint.org/) via GitHub Actions*`;
          
          if (context.eventName === 'pull_request') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }
