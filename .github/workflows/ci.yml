name: CI

on:
  # Trigger on push to master
  push:
    branches: [ master ]
  # Trigger on PRs to any branch
  pull_request:
    branches: [ '**' ]

jobs:
  lint:
    runs-on: ubuntu-latest
    # Add permissions needed for PR comments
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
        
    - name: Run pylint for PR
      if: github.event_name == 'pull_request'
      id: pylint_pr
      continue-on-error: true
      run: |
        # Run pylint with different formats
        pylint utils pages tests config conftest.py test_settings.py --output-format=json > pylint_json.json || true
        pylint utils pages tests config conftest.py test_settings.py --output-format=colorized > pylint_details.txt || true
        pylint utils pages tests config conftest.py test_settings.py --output-format=text --score=yes > pylint_report.txt || true
        
        # Check if score meets requirement
        SCORE=$(tail -n 2 pylint_report.txt | grep "rated at" | grep -oP "[\d.]+(?=/10)")
        echo "PYLINT_SCORE=$SCORE" >> $GITHUB_ENV
        
        # Convert score to float and compare with 10
        if (( $(echo "$SCORE < 10.0" | bc -l) )); then
          echo "LINT_FAILED=true" >> $GITHUB_ENV
        else
          # Only if score is exactly 10.0
          if (( $(echo "$SCORE == 10.0" | bc -l) )); then
            echo "LINT_PERFECT=true" >> $GITHUB_ENV
          else
            echo "LINT_FAILED=true" >> $GITHUB_ENV
          fi
        fi
        
    - name: Run pylint for push
      if: github.event_name == 'push'
      id: pylint_push
      run: |
        # For push to master, just collect results
        pylint utils pages tests config conftest.py test_settings.py --output-format=colorized > pylint_report.txt || true
        
    - name: Generate Detailed Report
      if: github.event_name == 'pull_request'
      run: |
        {
          echo "### üîç Pylint Analysis"
          echo
          if [ -n "$LINT_FAILED" ]; then
            echo "#### ‚ùå Check Failed - Score: $PYLINT_SCORE/10 (Required: 10/10)"
            echo
            echo "<details><summary>üìã Detailed Report</summary>"
            echo
            echo "\`\`\`"
            cat pylint_details.txt
            echo "\`\`\`"
            echo
            echo "</details>"
            echo
            echo "#### üîß How to fix:"
            echo "1. Run pylint locally to see issues in real-time:"
            echo "   \`\`\`bash"
            echo "   pylint utils pages tests config conftest.py test_settings.py"
            echo "   \`\`\`"
            echo "2. Common fixes:"
            echo "   - Add docstrings for missing documentation"
            echo "   - Fix line length issues (max 100 chars)"
            echo "   - Handle specific exceptions instead of broad ones"
            echo "   - Remove unused imports and variables"
            echo "   - Fix code formatting issues"
          else
            echo "#### ‚úÖ All checks passed - Score: 10/10"
            echo
            echo "Great job! Code meets all quality standards."
          fi
        } > lint_report.md
        
    - name: Comment Results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let report;
          try {
            report = fs.readFileSync('lint_report.md', 'utf8');
          } catch (error) {
            report = '### ‚ö†Ô∏è Failed to generate lint report';
          }
          
          if (context.eventName === 'pull_request') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          } else {
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: report
            });
          }
          
          // Exit with error if lint failed for PR
          if (process.env.LINT_FAILED === 'true') {
            core.setFailed('Pylint score below 10/10');
          }
